const express = require("express");
const http = require("http");
const socketIo = require("socket.io");
const bodyParser = require("body-parser");
const cors = require("cors");
const mongoose = require("mongoose");
const { verifyPassword } = require("./auth");

// Connexion √† MongoDB
mongoose.connect("mongodb://localhost:27017/pvtgaming", {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => console.log("‚úÖ Connect√© √† MongoDB"))
  .catch(err => console.error("‚ùå Erreur de connexion √† MongoDB :", err));

// D√©finition du mod√®le pour les joueurs
const PlayerSchema = new mongoose.Schema({
    pseudo: { type: String, required: true },
    idBrawlStars: { type: String, required: true },
    trophies: { type: Number, required: true },
    image: { type: String, default: "default-avatar.png" },
    roster: { type: String, required: true }
});

const Player = mongoose.model("Player", PlayerSchema);

// Initialisation du serveur Express
const app = express();
const server = http.createServer(app);
const io = socketIo(server);

app.use(express.static("public")); // Servir les fichiers statiques
app.use(bodyParser.json());
app.use(cors());

// üìå Route pour l'inscription des joueurs
app.post("/api/inscription", async (req, res) => {
    try {
        const { pseudo, idBrawlStars, trophies, image, roster } = req.body;

        if (!pseudo || !idBrawlStars || !trophies || !roster) {
            return res.status(400).json({ error: "Tous les champs sont requis !" });
        }

        const newPlayer = new Player({ pseudo, idBrawlStars, trophies, image, roster });
        await newPlayer.save();

        res.status(201).json({ message: "Inscription r√©ussie !" });
    } catch (err) {
        res.status(500).json({ error: "Erreur lors de l'inscription" });
    }
});

// üìå Route pour v√©rifier le mot de passe
app.post("/verify-password", async (req, res) => {
    const { pseudo, password } = req.body;
    const isValid = await verifyPassword(password);

    if (isValid) {
        res.json({ success: true });
    } else {
        res.json({ success: false });
    }
});

// üìå Gestion du chat en temps r√©el
io.on("connection", (socket) => {
    console.log("üîµ Un utilisateur est connect√©");

    socket.on("message", (msg) => {
        io.emit("message", msg);
    });

    socket.on("disconnect", () => {
        console.log("üî¥ Un utilisateur s'est d√©connect√©");
    });
});

// üìå D√©marrage du serveur
server.listen(3000, () => {
    console.log("üöÄ Serveur en √©coute sur http://localhost:3000");
});
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");

// Sch√©ma Admin
const AdminSchema = new mongoose.Schema({
    pseudo: { type: String, required: true, unique: true },
    password: { type: String, required: true }
});

const Admin = mongoose.model("Admin", AdminSchema);

// Cr√©ation d'un compte admin par d√©faut (ex√©cut√© une seule fois)
async function createAdmin() {
    const existingAdmin = await Admin.findOne({ pseudo: "admin" });
    if (!existingAdmin) {
        const hashedPassword = await bcrypt.hash("monmotdepasse123", 10);
        await new Admin({ pseudo: "admin", password: hashedPassword }).save();
        console.log("‚úÖ Compte admin cr√©√© !");
    } else {
        console.log("üîπ L'admin existe d√©j√†.");
    }
}

// Ex√©cuter la fonction au d√©marrage
createAdmin();
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const app = express();
app.use(bodyParser.json());
app.use(cors());

const SECRET_KEY = "supersecret"; // Cl√© secr√®te pour s√©curiser les tokens

// Route pour se connecter en tant qu'administrateur
app.post("/api/admin/login", async (req, res) => {
    try {
        const { pseudo, password } = req.body;

        const admin = await Admin.findOne({ pseudo });
        if (!admin) return res.status(401).json({ error: "Pseudo ou mot de passe incorrect !" });

        const isMatch = await bcrypt.compare(password, admin.password);
        if (!isMatch) return res.status(401).json({ error: "Pseudo ou mot de passe incorrect !" });

        const token = jwt.sign({ pseudo: admin.pseudo }, SECRET_KEY, { expiresIn: "2h" });
        res.status(200).json({ message: "Connexion r√©ussie !", token });
    } catch (err) {
        res.status(500).json({ error: "Erreur lors de l'authentification" });
    }
});

// Middleware pour s√©curiser les routes admin
function verifyAdmin(req, res, next) {
    const token = req.headers["authorization"];
    if (!token) return res.status(403).json({ error: "Acc√®s refus√© !" });

    jwt.verify(token, SECRET_KEY, (err, decoded) => {
        if (err) return res.status(403).json({ error: "Token invalide !" });
        req.admin = decoded;
        next();
    });
}

// Route prot√©g√©e (Exemple : Voir tous les joueurs)
app.get("/api/admin/joueurs", verifyAdmin, async (req, res) => {
    try {
        const players = await Player.find();
        res.status(200).json(players);
    } catch (err) {
        res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des joueurs" });
    }
});

// D√©marrage du serveur
app.listen(3000, () => {
    console.log("üöÄ Serveur d√©marr√© sur http://localhost:3000");
});
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");

// Sch√©ma Admin
const AdminSchema = new mongoose.Schema({
    pseudo: { type: String, required: true, unique: true },
    password: { type: String, required: true }
});

const Admin = mongoose.model("Admin", AdminSchema);

// Cr√©ation d'un compte admin par d√©faut
async function createAdmin() {
    const existingAdmin = await Admin.findOne({ pseudo: "admin" });
    if (!existingAdmin) {
        const hashedPassword = await bcrypt.hash("monmotdepasse123", 10);
        await new Admin({ pseudo: "admin", password: hashedPassword }).save();
        console.log("‚úÖ Compte admin cr√©√© avec succ√®s !");
    } else {
        console.log("üîπ L'admin existe d√©j√†.");
    }
}

// Ex√©cuter la fonction au d√©marrage
createAdmin();
